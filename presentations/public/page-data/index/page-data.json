{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"7e496b9e-ec75-5daf-acc9-09cb6907c39f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar themes = defaultThemes;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  themes: themes,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"TypeScript\")), mdx(\"hr\", null), mdx(\"h1\", null, \"TypeScript\"), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u70BA\\u4F55 TypeScript\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markup\"\n  }), \"\\u512A\\uFF1A\\n1. \\u589E\\u52A0\\u53EF\\u8B80\\u6027\\u548C\\u53EF\\u7DAD\\u8B77\\u6027\\n2. \\u53EF\\u4EE5\\u5728\\u5BEB\\u7684\\u968E\\u6BB5\\u5C31\\u767C\\u73FE\\u5927\\u90E8\\u5206\\u932F\\u8AA4\\uFF0C\\u6BD4\\u5728\\u57F7\\u884C\\u7684\\u6642\\u5019\\u624D\\u767C\\u73FE\\u932F\\u8AA4\\u597D\\n3. TypeScript \\u662F JavaScript \\u7684\\u8D85\\u96C6\\uFF0C.js \\u6587\\u4EF6\\u53EF\\u4EE5\\u76F4\\u63A5\\u91CD\\u547D\\u540D\\u7232 .ts \\u5373\\u53EF\\n4. \\u4F7F\\u7528 ES6 \\u898F\\u7BC4\\uFF0C\\u4E5F\\u652F\\u6301\\u90E8\\u5206 ESNext \\u8349\\u6848\\u7684\\u898F\\u7BC4\\n5. \\u5373\\u4F7F plugin \\u4E0D\\u662F\\u7528 TypeScript \\u5BEB\\u7684\\uFF0C\\u4E5F\\u53EF\\u4EE5\\u7DE8\\u5BEB\\u55AE\\u7368\\u7684\\u985E\\u578B\\u6587\\u4EF6\\n   \\u4F9B TypeScript \\u8B80\\u53D6\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markup\"\n  }), \"\\u7F3A\\uFF1A\\n1. \\u6709\\u4E00\\u5B9A\\u7684\\u5B78\\u7FD2\\u6210\\u672C\\uFF0C\\u9700\\u8981\\u7406\\u89E3\\u63A5\\u53E3\\uFF08Interfaces\\uFF09\\u3001\\u6CDB\\u578B\\uFF08Generics\\uFF09\\u3001\\n   \\u985E\\uFF08Classes\\uFF09\\u3001\\u679A\\u8209\\u985E\\u578B\\uFF08Enums\\uFF09\\u7B49\\u524D\\u7AEF\\u5DE5\\u7A0B\\u5E2B\\u53EF\\u80FD\\u4E0D\\u662F\\u5F88\\u719F\\u6089\\u7684\\u6982\\u5FF5\\n2. \\u77ED\\u671F\\u53EF\\u80FD\\u6703\\u589E\\u52A0\\u4E00\\u4E9B\\u958B\\u767C\\u6210\\u672C\\uFF0C\\u7562\\u7ADF\\u8981\\u591A\\u5BEB\\u4E00\\u4E9B\\u985E\\u578B\\u7684\\u5B9A\\u7FA9\\uFF0C\\u4E0D\\u904E\\u5C0D\\u65BC\\n  \\u4E00\\u500B\\u9700\\u8981\\u9577\\u671F\\u7DAD\\u8B77\\u7684\\u9805\\u76EE\\uFF0CTypeScript \\u80FD\\u5920\\u6E1B\\u5C11\\u5176\\u7DAD\\u8B77\\u6210\\u672C\\n3. \\u53EF\\u80FD\\u548C\\u4E00\\u4E9B plugin \\u7684\\u76F8\\u5BB9\\u6027\\u4E0D\\u662F\\u5F88\\u5B8C\\u7F8E\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u5B89\\u88DD TypeScript\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"安裝 TypeScript\\\"\",\n    \"subtitle\": \"\\\"安裝\",\n    \"TypeScript\\\"\": true\n  }), \"$ npm install -g typescript\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"安裝 TypeScript\\\"\",\n    \"subtitle\": \"\\\"安裝\",\n    \"TypeScript\\\"\": true\n  }), \"$ tsc --init\\n// \\u751F\\u6210 tsconfig.json \\u6A94\\u6848\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"新增一個 index.ts 檔案\\\"\",\n    \"subtitle\": \"\\\"新增一個\",\n    \"index.ts\": true,\n    \"檔案\\\"\": true\n  }), \"const msg = \\\"123\\\";\\n\\nfunction showMsg(something) {\\n  console.log(something);\\n}\\n\\nshowMsg(msg);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"將 TypeScript 編譯成 JavaScript\\\"\",\n    \"subtitle\": \"\\\"將\",\n    \"TypeScript\": true,\n    \"編譯成\": true,\n    \"JavaScript\\\"\": true\n  }), \"$ tsc\\n// \\u81EA\\u52D5\\u6383\\u63CF\\u6240\\u6709 .ts \\u7D50\\u5C3E\\u7684\\u6A94\\u6848\\u4E26\\u4E14\\u7522\\u51FA JS \\u6A94\\u6848\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u539F\\u59CB\\u578B\\u5225 Primitive Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"undefined\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"null\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"symbol\\uFF08ES6\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"void\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"型別推論（Type Inference）\\\"\",\n    \"title\": \"\\\"型別推論（Type\",\n    \"Inference）\\\"\": true\n  }), \"let myName = 'Maxwell';\\nlet age = 20;\\nlet hasPet = false;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,4,6 title=\\\"型別推論（Type Inference）\\\" subtitle=\\\"TypeScript 會自行推斷出型別\\\"\",\n    \"2,4,6\": true,\n    \"title\": \"\\\"型別推論（Type\",\n    \"Inference）\\\"\": true,\n    \"subtitle\": \"\\\"TypeScript\",\n    \"會自行推斷出型別\\\"\": true\n  }), \"let myName = 'Maxwell';\\nlet myName: string = 'Maxwell';\\nlet age = 20;\\nlet age: number = 20;\\nlet hasPet = false;\\nlet hasPet: boolean = false;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Nullable Types\\\"\",\n    \"title\": \"\\\"Nullable\",\n    \"Types\\\"\": true\n  }), \"let nothing = undefined;\\nlet nothingLiterally = null;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,4 title=\\\"任意型別 any\\\" subtitle=\\\"TypeScript 會判別為 any 型別\\\"\",\n    \"2,4\": true,\n    \"title\": \"\\\"任意型別\",\n    \"any\\\"\": true,\n    \"subtitle\": \"\\\"TypeScript\",\n    \"會判別為\": true,\n    \"any\": true,\n    \"型別\\\"\": true\n  }), \"let nothing = undefined;\\nlet nothing: any = undefined;\\nlet nothingLiterally = null;\\nlet nothingLiterally: any = null;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"任意型別 any\\\" subtitle=\\\"被視為 any 型別的變數可以隨便的使用\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"任意型別\",\n    \"any\\\"\": true,\n    \"subtitle\": \"\\\"被視為\",\n    \"any\": true,\n    \"型別的變數可以隨便的使用\\\"\": true\n  }), \"let nothing: any = undefined;\\nlet nothingLiterally: any = null;\\nnothing = \\\"nothing\\\";\\nnothing = 123456789;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"任意型別 any\\\"\",\n    \"title\": \"\\\"任意型別\",\n    \"any\\\"\": true\n  }), \"any \\u578B\\u5225\\u5F88\\u5BB9\\u6613\\u9020\\u6210\\u6DF7\\u4E82 \\u53EA\\u6709\\u6975\\u5C11\\u6578\\u72C0\\u6CC1\\u6703\\u7528\\u5230\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,4 title=\\\"Nullable Types\\\" subtitle=\\\"為 undefined 與 null 的變數做型別註記\\\"\",\n    \"2,4\": true,\n    \"title\": \"\\\"Nullable\",\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"為\",\n    \"undefined\": true,\n    \"與\": true,\n    \"null\": true,\n    \"的變數做型別註記\\\"\": true\n  }), \"let nothing: any = undefined;\\nlet nothing: undefined = undefined;\\nlet nothingLiterally: any = null;\\nlet nothingLiterally: null = null;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"具有型別但是預設為空值\\\"\",\n    \"title\": \"\\\"具有型別但是預設為空值\\\"\"\n  }), \"let canBeNullString: string;\\ncanBeNullString = 'hello';\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"具有型別但是預設為空值\\\" subtitle=\\\"報錯：變數 'canBeNullString' 已在指派之前使用\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"具有型別但是預設為空值\\\"\",\n    \"subtitle\": \"\\\"報錯：變數\",\n    \"'canBeNullString'\": true,\n    \"已在指派之前使用\\\"\": true\n  }), \"let canBeNullString: string;\\n// Temporal Dead Zone\\nlet myString = canBeNullString;\\ncanBeNullString = 'hello';\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:2 title=\\\"聯合型別（Union Types）\\\" subtitle=\\\"具有型別 但也希望值能夠被清空時\\\"\",\n    \"1:2\": true,\n    \"title\": \"\\\"聯合型別（Union\",\n    \"Types）\\\"\": true,\n    \"subtitle\": \"\\\"具有型別\",\n    \"但也希望值能夠被清空時\\\"\": true\n  }), \"let canBeNullString: string | null;\\ncanBeNullString = 'hello';\\ncanBeNullString = null;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1,3 title=\\\"聯合型別（Union Types）\\\" subtitle=\\\"具有型別 但也希望值能夠被清空時\\\"\",\n    \"1,3\": true,\n    \"title\": \"\\\"聯合型別（Union\",\n    \"Types）\\\"\": true,\n    \"subtitle\": \"\\\"具有型別\",\n    \"但也希望值能夠被清空時\\\"\": true\n  }), \"let canBeNullString: string | null;\\ncanBeNullString = 'hello';\\ncanBeNullString = null;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:3 title=\\\"聯合型別（Union Types）\\\" subtitle=\\\"聯合型別的其他用法\\\"\",\n    \"1:3\": true,\n    \"title\": \"\\\"聯合型別（Union\",\n    \"Types）\\\"\": true,\n    \"subtitle\": \"\\\"聯合型別的其他用法\\\"\"\n  }), \"let myFavoriteNumber: string | number;\\nmyFavoriteNumber = 'seven';\\nmyFavoriteNumber = 7;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"聯合型別（Union Types）\\\" subtitle=\\\"聯合型別在被賦值時 會根據型別推論的規則推斷出自己的型別\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"聯合型別（Union\",\n    \"Types）\\\"\": true,\n    \"subtitle\": \"\\\"聯合型別在被賦值時\",\n    \"會根據型別推論的規則推斷出自己的型別\\\"\": true\n  }), \"let myFavoriteNumber: string | number;\\nmyFavoriteNumber = 'seven';\\nconsole.log(myFavoriteNumber.length); // 5\\nmyFavoriteNumber = 7;\\nconsole.log(myFavoriteNumber.length); // \\u7DE8\\u8B6F\\u6642\\u5831\\u932F\\n\"))), mdx(\"hr\", null), mdx(\"h4\", null, \"\\u578B\\u5225\\u8A3B\\u8A18\\u7684\\u76EE\\u7684\"), mdx(\"ul\", {\n    style: {\n      \"width\": \"80%\",\n      \"fontSize\": \"35px\"\n    }\n  }, mdx(\"li\", null, \"\\u8A3B\\u8A18\\u6700\\u5927\\u7684\\u597D\\u8655\\uFF0C\\u9664\\u4E86\\u8B93\\u958B\\u767C\\u8005\\u660E\\u78BA\\u77E5\\u9053\\u8B8A\\u6578\\u662F\\u54EA\\u500B\\u578B\\u5225\\u5916\\uFF0CTS \\u4E5F\\u53EF\\u4EE5\\u4E0D\\u7528\\u731C\\u5C31\\u77E5\\u9053\\u8A72\\u8B8A\\u6578\\u7684\\u578B\\u5225\"), mdx(\"li\", null, \"\\u907F\\u514D any \\u9020\\u6210\\u5404\\u7A2E\\u6DF7\\u4E82\"), mdx(\"li\", null, \"\\u578B\\u5225\\u63A8\\u8AD6\\u662F TS \\u5728\\u958B\\u59CB\\u5BEB\\u7A0B\\u5F0F\\u78BC\\u7684\\u6642\\u5019\\uFF0C\\u5C31\\u6703\\u4E3B\\u52D5\\u76E3\\u63A7\\uFF1B\\u800C\\u578B\\u5225\\u8A3B\\u8A18\\u5247\\u662F\\u958B\\u767C\\u8005\\u5FC5\\u9808\\u624B\\u52D5\\u5BA3\\u544A\\u7D66 TS \\u770B\\u7684\")), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u7269\\u4EF6\\u578B\\u5225 Object Types\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u57FA\\u790E\\u7269\\u4EF6\\u578B\\u5225\\uFF1AObject, Array, Class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TypeScript \\u64F4\\u5145\\u578B\\u5225\\uFF1AEnum, Tuple\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u51FD\\u5F0F\\u578B\\u5225 Function Types\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"物件型別的型別推論\\\"\",\n    \"title\": \"\\\"物件型別的型別推論\\\"\"\n  }), \"const info = {\\n  name: 'Maxwell',\\n  age: 20,\\n  hasPet: false,\\n  // Nullable Type \\u5728 Object \\u4E2D\\u5F97\\u5230\\u61C9\\u8A72\\u88AB\\u63A8\\u8AD6\\u51FA\\u4F86\\u7684\\u578B\\u5225 \\u800C\\u975E any\\n  knows: undefined, \\n  identity: null, \\n}; \\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"物件型別的型別註記\\\" subtitle=\\\"TypeScript 中使用介面（Interfaces）來定義物件的型別\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"物件型別的型別註記\\\"\",\n    \"subtitle\": \"\\\"TypeScript\",\n    \"中使用介面（Interfaces）來定義物件的型別\\\"\": true\n  }), \"interface info {\\n  name: string,\\n  age: number,\\n  hasPet: boolean,\\n  knows: undefined,\\n  identity: null,\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"使用物件型別\\\" subtitle=\\\"定義一個變數 Maxwell 型別是 info\\\"\",\n    \"title\": \"\\\"使用物件型別\\\"\",\n    \"subtitle\": \"\\\"定義一個變數\",\n    \"Maxwell\": true,\n    \"型別是\": true,\n    \"info\\\"\": true\n  }), \"interface info {\\n  name: string;\\n  age: number;\\n  hasPet: boolean;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"使用物件型別\\\" subtitle=\\\"定義一個變數 Maxwell 型別是 info\\\"\",\n    \"title\": \"\\\"使用物件型別\\\"\",\n    \"subtitle\": \"\\\"定義一個變數\",\n    \"Maxwell\": true,\n    \"型別是\": true,\n    \"info\\\"\": true\n  }), \"const Maxwell: info = {\\n  name: 'Maxwell',\\n  age: 20,\\n  hasPet: false,\\n };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"使用物件型別\\\" subtitle=\\\"TypeScript 定義好的物件 是不允許少掉屬性的\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"使用物件型別\\\"\",\n    \"subtitle\": \"\\\"TypeScript\",\n    \"定義好的物件\": true,\n    \"是不允許少掉屬性的\\\"\": true\n  }), \"const Maxwell: info = {\\n  name: 'Maxwell',\\n  age: 20,\\n };\\n// \\u5831\\u932F\\uFF1A\\u7F3A\\u5C11\\u5C6C\\u6027 'hasPet'\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"使用物件型別\\\" subtitle=\\\"也不能多出其他屬性\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"使用物件型別\\\"\",\n    \"subtitle\": \"\\\"也不能多出其他屬性\\\"\"\n  }), \"const Maxwell: info = {\\n  name: 'Maxwell',\\n  age: 20,\\n  hasPet: false,\\n  gender: 'male',\\n };\\n// \\u5831\\u932F\\uFF1A\\u7269\\u4EF6\\u5E38\\u503C\\u53EA\\u53EF\\u6307\\u5B9A\\u5DF2\\u77E5\\u7684\\u5C6C\\u6027\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"物件型別的可選屬性\\\" subtitle=\\\"有時我們希望不要完全符合一個物件的 key 那麼可以使用可選屬性\\\"\",\n    \"title\": \"\\\"物件型別的可選屬性\\\"\",\n    \"subtitle\": \"\\\"有時我們希望不要完全符合一個物件的\",\n    \"key\": true,\n    \"那麼可以使用可選屬性\\\"\": true\n  }), \"interface info {\\n  name: string;\\n  age: number;\\n  hasPet?: boolean;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"物件型別的可選屬性\\\" subtitle=\\\"有時我們希望不要完全符合一個物件的 key 那麼可以使用可選屬性\\\"\",\n    \"title\": \"\\\"物件型別的可選屬性\\\"\",\n    \"subtitle\": \"\\\"有時我們希望不要完全符合一個物件的\",\n    \"key\": true,\n    \"那麼可以使用可選屬性\\\"\": true\n  }), \"const Maxwell: info = {\\n  name: 'Maxwell',\\n  age: 20,\\n };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6 title=\\\"物件型別的可選屬性\\\" subtitle=\\\"但仍不允許新增未定義的屬性\\\"\",\n    \"1:6\": true,\n    \"title\": \"\\\"物件型別的可選屬性\\\"\",\n    \"subtitle\": \"\\\"但仍不允許新增未定義的屬性\\\"\"\n  }), \"const Maxwell: info = {\\n  name: 'Maxwell',\\n  age: 20,\\n  gender: 'male',\\n };\\n// \\u5831\\u932F\\uFF1A\\u7269\\u4EF6\\u5E38\\u503C\\u53EA\\u53EF\\u6307\\u5B9A\\u5DF2\\u77E5\\u7684\\u5C6C\\u6027\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"物件型別的任意屬性\\\" subtitle=\\\"有時候我們希望一個 interface 允許有任意屬性\\\"\",\n    \"title\": \"\\\"物件型別的任意屬性\\\"\",\n    \"subtitle\": \"\\\"有時候我們希望一個\",\n    \"interface\": true,\n    \"允許有任意屬性\\\"\": true\n  }), \"interface info {\\n  name: string;\\n  [propName: string]: string;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:8 title=\\\"物件型別的任意屬性\\\" subtitle=\\\"使用 [propName: string] 定義任意屬性為 string 型別的值\\\"\",\n    \"5:8\": true,\n    \"title\": \"\\\"物件型別的任意屬性\\\"\",\n    \"subtitle\": \"\\\"使用\",\n    \"[propName:\": true,\n    \"string]\": true,\n    \"定義任意屬性為\": true,\n    \"string\": true,\n    \"型別的值\\\"\": true\n  }), \"interface info {\\n  name: string;\\n  [propName: string]: string;\\n};\\nconst Maxwell: info = {\\n  name: 'Maxwell',\\n  gender: 'male',\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"物件型別的任意屬性\\\" subtitle=\\\"一旦定義了任意屬性 那麼自訂屬性和可選屬性的型別都必須是它型別的子集\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"物件型別的任意屬性\\\"\",\n    \"subtitle\": \"\\\"一旦定義了任意屬性\",\n    \"那麼自訂屬性和可選屬性的型別都必須是它型別的子集\\\"\": true\n  }), \"interface info {\\n  name: string;\\n  age?: number;\\n  // \\u5831\\u932F\\uFF1A\\u985E\\u578B 'number | undefined' \\u7684\\u5C6C\\u6027\\n  // 'age' \\u4E0D\\u53EF\\u6307\\u6D3E\\u7D66\\u5B57\\u4E32\\u985E\\u578B 'string'\\n  [propName: string]: string;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"物件型別的任意屬性\\\" subtitle=\\\"一旦定義了任意屬性 那麼自訂屬性和可選屬性的型別都必須是它型別的子集\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"物件型別的任意屬性\\\"\",\n    \"subtitle\": \"\\\"一旦定義了任意屬性\",\n    \"那麼自訂屬性和可選屬性的型別都必須是它型別的子集\\\"\": true\n  }), \"const Maxwell: info = {\\n  name: 'Maxwell',\\n  age: 20,\\n  gender: 'male',\\n };\\n// \\u5831\\u932F\\uFF1A\\u985E\\u578B '{ name: string; age: number; gender: string; }'\\n// \\u4E0D\\u53EF\\u6307\\u6D3E\\u7D66\\u985E\\u578B 'Person'\\u3002\\u5C6C\\u6027 'age' \\u548C\\u7D22\\u5F15\\u7C3D\\u7AE0\\u4E0D\\u76F8\\u5BB9\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"物件型別的唯讀屬性\\\" subtitle=\\\"有時候我們希望物件中的一些欄位只能在建立的時候被賦值\\\"\",\n    \"title\": \"\\\"物件型別的唯讀屬性\\\"\",\n    \"subtitle\": \"\\\"有時候我們希望物件中的一些欄位只能在建立的時候被賦值\\\"\"\n  }), \"interface info {\\n  readonly id: number;\\n  name: string;\\n  age?: number;\\n  [propName: string]: any;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"7:11 title=\\\"物件型別的唯讀屬性\\\" subtitle=\\\"有時候我們希望物件中的一些欄位只能在建立的時候被賦值\\\"\",\n    \"7:11\": true,\n    \"title\": \"\\\"物件型別的唯讀屬性\\\"\",\n    \"subtitle\": \"\\\"有時候我們希望物件中的一些欄位只能在建立的時候被賦值\\\"\"\n  }), \"interface info {\\n  readonly id: number;\\n  name: string;\\n  age?: number;\\n  [propName: string]: any;\\n};\\nconst Maxwell: Person = {\\n    id: 59487,\\n    name: 'Maxwell',\\n    gender: 'male'\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"物件型別的唯讀屬性\\\" subtitle=\\\"使用 readonly 定義的屬性 id 初始化後 不能被重複賦值\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"物件型別的唯讀屬性\\\"\",\n    \"subtitle\": \"\\\"使用\",\n    \"readonly\": true,\n    \"定義的屬性\": true,\n    \"id\": true,\n    \"初始化後\": true,\n    \"不能被重複賦值\\\"\": true\n  }), \"const Maxwell: Person = {\\n    id: 59487,\\n    name: 'Maxwell',\\n    gender: 'male'\\n};\\nMaxwell.id = 9487;\\n// \\u5831\\u932F\\uFF1A\\u56E0\\u70BA 'id' \\u70BA\\u552F\\u8B80\\u5C6C\\u6027\\uFF0C\\u6240\\u4EE5\\u7121\\u6CD5\\u6307\\u6D3E\\u81F3 'id'\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"型別註記為 Object 的物件\\\"\",\n    \"title\": \"\\\"型別註記為\",\n    \"Object\": true,\n    \"的物件\\\"\": true\n  }), \"let justAnObject: object = { hello: 'hi', };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:2 title=\\\"物件型別的唯讀屬性\\\" subtitle=\\\"Object 型別完全覆寫是可以被 TypeScript 接受的\\\"\",\n    \"1:2\": true,\n    \"title\": \"\\\"物件型別的唯讀屬性\\\"\",\n    \"subtitle\": \"\\\"Object\",\n    \"型別完全覆寫是可以被\": true,\n    \"TypeScript\": true,\n    \"接受的\\\"\": true\n  }), \"let justAnObject: object = { hello: 'hi', };\\njustAnObject = { goodbye: 'bye', };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:3 title=\\\"物件型別的唯讀屬性\\\" subtitle=\\\"以原始型態覆寫會出錯\\\"\",\n    \"1:3\": true,\n    \"title\": \"\\\"物件型別的唯讀屬性\\\"\",\n    \"subtitle\": \"\\\"以原始型態覆寫會出錯\\\"\"\n  }), \"let justAnObject: object = { hello: 'hi', };\\njustAnObject = 123;\\n// \\u5831\\u932F\\uFF1A\\u985E\\u578B 'number' \\u4E0D\\u53EF\\u6307\\u6D3E\\u7D66\\u985E\\u578B 'object'\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:9 title=\\\"物件型別的唯讀屬性\\\" subtitle=\\\"除了很明顯的原始型別不是物件外 全員一致 Pass\\\"\",\n    \"1:9\": true,\n    \"title\": \"\\\"物件型別的唯讀屬性\\\"\",\n    \"subtitle\": \"\\\"除了很明顯的原始型別不是物件外\",\n    \"全員一致\": true,\n    \"Pass\\\"\": true\n  }), \"let justAnObject: object = { hello: 'hi', };\\njustAnObject = [1, '2', 3, true, { hello: 'hi', }];\\njustAnObject = function () { console.log('ohhhh !?!?!?'); };\\njustAnObject = new Object();\\njustAnObject = new String('hahaha');\\njustAnObject = new Number(87);\\njustAnObject = Object;\\njustAnObject = Array;\\n// \\u4EE5\\u4E0A\\u5168\\u54E1 Pass\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true\n  }), \"// \\u5168\\u90E8\\u90FD\\u662F\\u6578\\u5B57\\nconst numbers = [1, 2, 3, 4, 5];\\n\\n// \\u5168\\u90E8\\u90FD\\u662F\\u5B57\\u4E32\\nconst strings = ['hi', 'how are you', 'goodbye'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"3,7 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"陣列型別的型別註記\\\"\",\n    \"3,7\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"陣列型別的型別註記\\\"\"\n  }), \"// \\u5168\\u90E8\\u90FD\\u662F\\u6578\\u5B57\\nconst numbers = [1, 2, 3, 4, 5];\\nconst numbers: number[] = [1, 2, 3, 4, 5];\\n\\n// \\u5168\\u90E8\\u90FD\\u662F\\u5B57\\u4E32\\nconst strings = ['hi', 'how are you', 'goodbye'];\\nconst strings: string[] = ['hi', 'how are you', 'goodbye'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2:10 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"陣列型別的型別註記\\\"\",\n    \"2:10\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"陣列型別的型別註記\\\"\"\n  }), \"const numbers = [1, 2, 3, 4, 5];\\n// \\u300C\\u578B\\u5225 + \\u65B9\\u62EC\\u865F\\u300D\\u8868\\u793A\\u6CD5\\nconst numbers: number[] = [1, 2, 3, 4, 5];\\n// \\u9663\\u5217\\u6CDB\\u578B\\uFF08Array Generic\\uFF09 Array<elemType>\\nconst numbers: Array<number> = [1, 2, 3, 4, 5];\\n// \\u7528 Interface \\u8868\\u793A\\u9663\\u5217\\ninterface NumberArray {\\n  [index: number]: number;\\n}\\nconst numbers: NumberArray = [1, 1, 2, 3, 5];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"以上都是會出錯的用法\\\"\",\n    \"1:6\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"以上都是會出錯的用法\\\"\"\n  }), \"const numbers: number[] = [1, 2, 3, 4, 5];\\n\\nnumbers[1] = '123';\\nnumbers.push('456');\\nnumbers.concat(['789', '987']);\\nnumbers = ['\\u5408\\u9AD4\\uFF01\\uFF01'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\" subtitle=\\\"TypeScript 對混合型陣列的型別推論\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"TypeScript\",\n    \"對混合型陣列的型別推論\\\"\": true\n  }), \"const numberAndString = [1, '2', 3, '\\u5B89\\u5B89'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\" subtitle=\\\"用複合型別解決\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"用複合型別解決\\\"\"\n  }), \"const numberAndString = [1, '2', 3, '\\u5B89\\u5B89'];\\nconst numberAndString: (string | number)[] = [1, '2', 3, '\\u5B89\\u5B89'];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\" subtitle=\\\"空陣列的型別推論\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"空陣列的型別推論\\\"\"\n  }), \"let emptyArray = [];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\" subtitle=\\\"空陣列的型別推論\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"空陣列的型別推論\\\"\"\n  }), \"let emptyArray = [];\\nlet emptyArray: any[] = [];\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\" subtitle=\\\"特殊陣列型別註記的方式\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"特殊陣列型別註記的方式\\\"\"\n  }), \"let objectsArray1 = [\\n  { message: 'Hello' },\\n  { message: 'Hi' },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"特殊陣列型別註記的方式\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"特殊陣列型別註記的方式\\\"\"\n  }), \"let objectsArray1: {\\n  message: string;\\n}[] = [\\n  { message: 'Hello' },\\n  { message: 'Hi' },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"特殊陣列型別註記的方式\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"特殊陣列型別註記的方式\\\"\"\n  }), \"let objectsArray2 = [\\n  { message: 'Hello' },\\n  { message: 123456789 },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:9 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"特殊陣列型別註記的方式\\\"\",\n    \"1:9\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"特殊陣列型別註記的方式\\\"\"\n  }), \"let objectsArray2: ({\\n  message: string;\\n} | {\\n  message: number;\\n})[] = [\\n  { message: 'Hello' },\\n  { message: 123456789 },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"特殊陣列型別註記的方式\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"特殊陣列型別註記的方式\\\"\"\n  }), \"let objectsArray3 = [\\n  { message: 'Hello' },\\n  { message: 'Hi', revolt: true },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:11 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"特殊陣列型別註記的方式\\\"\",\n    \"1:11\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"特殊陣列型別註記的方式\\\"\"\n  }), \"let objectsArray3: ({\\n    message: string;\\n    revolt?: undefined;\\n} | {\\n    message: string;\\n    revolt: boolean;\\n})[] = [\\n  { message: 'Hello' },\\n  { message: 'Hi', revolt: true },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:8 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"這種型態其實可以被簡化成\\\"\",\n    \"1:8\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"這種型態其實可以被簡化成\\\"\"\n  }), \"let objectsArray3: {\\n    message: string;\\n    revolt?: boolean;\\n}[] = [\\n  { message: 'Hello' },\\n  { message: 'Hi', revolt: true },\\n  { message: 'Goodbye' }\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true\n  }), \"... \\u5F8C\\u9762\\u5BE6\\u5728\\u662F\\u592A\\u8907\\u96DC\\u4E86 \\u4E4B\\u5F8C\\u518D\\u8AAA\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\" subtitle=\\\"至少到這裡 大概知道陣列型別的推論規則\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"至少到這裡\",\n    \"大概知道陣列型別的推論規則\\\"\": true\n  }), \"(\\u96C6\\u5408 S \\u88E1\\u6240\\u6709\\u578B\\u5225 \\\"union\\\" \\u7684\\u7D50\\u679C)[]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true\n  }), \"const testArray1 = [\\n  [1, 2, 3],\\n  ['Hello', 'Bye'],\\n  [true, false, true, false],\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"S 型別的集合 這時會包含三種不同的型別\\\"\",\n    \"1:6\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"S\",\n    \"型別的集合\": true,\n    \"這時會包含三種不同的型別\\\"\": true\n  }), \"const testArray1 = [\\n  [1, 2, 3],\\n  ['Hello', 'Bye'],\\n  [true, false, true, false],\\n];\\nS = { number[], string[], boolean[] }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:12 title=\\\"陣列型別 Array Types\\\" subtitle=\\\"S 型別的集合 這時會包含三種不同的型別\\\"\",\n    \"1:12\": true,\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"S\",\n    \"型別的集合\": true,\n    \"這時會包含三種不同的型別\\\"\": true\n  }), \"S = { number[], string[], boolean[] }\\nS \\u88E1\\u6240\\u6709\\u578B\\u5225\\u7684 union = (\\n  number[] |\\n  string[] |\\n  boolean[]\\n)\\n\\n\\u5957\\u5165\\u516C\\u5F0F\\u5F97\\u5230\\uFF1A(\\n  number[] |\\n  string[] |\\n  boolean[]\\n)[]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true\n  }), \"const testArray2 = [\\n  [1, 2, 3],\\n  ['Hello', 'Bye'],\\n  [true, false, 123, null],\\n  ['String', undefined],\\n];\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"陣列型別 Array Types\\\"\",\n    \"title\": \"\\\"陣列型別\",\n    \"Array\": true,\n    \"Types\\\"\": true\n  }), \"\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000  \\u81EA\\u5DF1\\u6162\\u6162\\u89E3 \\u310F\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別的型別註記\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別的型別註記\\\"\"\n  }), \"// \\u51FD\\u5F0F\\u5BA3\\u544A\\uFF08Function Declaration\\uFF09\\nfunction testFunction() {\\n  console.log('Hi!');\\n};\\n\\n// \\u51FD\\u5F0F\\u8868\\u793A\\u5F0F\\uFF08Function Expression\\uFF09\\nconst testFunction = function() {\\n  console.log('Hi!');\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別的型別註記\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別的型別註記\\\"\"\n  }), \"// \\u51FD\\u5F0F\\u5BA3\\u544A\\uFF08Function Declaration\\uFF09\\nfunction testFunction() {\\n  console.log('Hi!');\\n};\\n\\n// \\u51FD\\u5F0F\\u8868\\u793A\\u5F0F\\uFF08Function Expression\\uFF09\\nconst testFunction = function() {\\n  console.log('Hi!');\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別的型別註記\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別的型別註記\\\"\"\n  }), \"// \\u51FD\\u5F0F\\u5BA3\\u544A\\uFF08Function Declaration\\uFF09\\nfunction testFunction(): void {\\n  console.log('Hi!');\\n};\\n\\n// \\u51FD\\u5F0F\\u8868\\u793A\\u5F0F\\uFF08Function Expression\\uFF09\\nconst testFunction = function() {\\n  console.log('Hi!');\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6:9 title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別的型別註記\\\"\",\n    \"6:9\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別的型別註記\\\"\"\n  }), \"// \\u51FD\\u5F0F\\u5BA3\\u544A\\uFF08Function Declaration\\uFF09\\nfunction testFunction(): void {\\n  console.log('Hi!');\\n};\\n\\n// \\u51FD\\u5F0F\\u8868\\u793A\\u5F0F\\uFF08Function Expression\\uFF09\\nconst testFunction = function() {\\n  console.log('Hi!');\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6:9 title=\\\"函式型別 Function Types\\\" subtitle=\\\"對等號右側的匿名函式進行了型別註記\\\"\",\n    \"6:9\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"對等號右側的匿名函式進行了型別註記\\\"\"\n  }), \"// \\u51FD\\u5F0F\\u5BA3\\u544A\\uFF08Function Declaration\\uFF09\\nfunction testFunction(): void {\\n  console.log('Hi!');\\n};\\n\\n// \\u51FD\\u5F0F\\u8868\\u793A\\u5F0F\\uFF08Function Expression\\uFF09\\nconst testFunction = function(): void {\\n  console.log('Hi!');\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6:9 title=\\\"函式型別 Function Types\\\" subtitle=\\\"手動給 const testFunction 做型別註記\\\"\",\n    \"6:9\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"手動給\",\n    \"const\": true,\n    \"testFunction\": true,\n    \"做型別註記\\\"\": true\n  }), \"// \\u51FD\\u5F0F\\u5BA3\\u544A\\uFF08Function Declaration\\uFF09\\nfunction testFunction(): void {\\n  console.log('Hi!');\\n};\\n\\n// \\u51FD\\u5F0F\\u8868\\u793A\\u5F0F\\uFF08Function Expression\\uFF09\\nconst testFunction() => void = function() {\\n  console.log('Hi!');\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true\n  }), \"\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000=> \\u7528\\u4F86\\u8868\\u793A\\u51FD\\u5F0F\\u7684\\u5B9A\\u7FA9\\n\\u3000\\u3000\\u3000\\u3000\\u5DE6\\u908A\\u662F\\u8F38\\u5165\\u578B\\u5225\\uFF0C\\u9700\\u8981\\u7528\\u62EC\\u865F\\u62EC\\u8D77\\u4F86\\n\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u53F3\\u908A\\u662F\\u51FD\\u5F0F\\u8981\\u8F38\\u51FA\\u578B\\u5225\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別加上參數後\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別加上參數後\\\"\"\n  }), \"const addition = function (num1, num2) {\\n  // \\u5831\\u932F\\uFF1A\\u53C3\\u6578 'num1', 'num2' \\u96B1\\u542B\\u4E86 'any' \\u985E\\u578B\\n  return num1 + num2;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true\n  }), \"\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u51FD\\u5F0F\\u8F38\\u5165\\u7684\\u53C3\\u6578\\u578B\\u5225 \\u6703\\u5F71\\u97FF\\u8F38\\u51FA\\u503C\\u7684\\u578B\\u5225\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\" subtitle=\\\"強制將參數註記為 any 的話 TypeScript 就不會理你了\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"強制將參數註記為\",\n    \"any\": true,\n    \"的話\": true,\n    \"TypeScript\": true,\n    \"就不會理你了\\\"\": true\n  }), \"const addition = function (num1: any, num2: any) {\\n  return num1 + num2;\\n};\\nconst shouldBeString: string = addition(123, 456);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"函式型別 Function Types\\\" subtitle=\\\"如果用正確的型別註記參數 TypeScript 就能夠自動推論出輸出的型別\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"如果用正確的型別註記參數\",\n    \"TypeScript\": true,\n    \"就能夠自動推論出輸出的型別\\\"\": true\n  }), \"const addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\nconst shouldBeString: string = addition(123, 456);\\n// \\u5831\\u932F\\uFF1A\\u985E\\u578B 'number' \\u4E0D\\u53EF\\u6307\\u6D3E\\u7D66\\u985E\\u578B 'string'\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:3 title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別是可以被覆寫的\\\"\",\n    \"1:3\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別是可以被覆寫的\\\"\"\n  }), \"let addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6 title=\\\"函式型別 Function Types\\\" subtitle=\\\"函式型別是可以被覆寫的\\\"\",\n    \"1:6\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"函式型別是可以被覆寫的\\\"\"\n  }), \"let addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\naddition = function (num1: number, num2: number) {\\n  return num2 + num1;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6 title=\\\"函式型別 Function Types\\\" subtitle=\\\"但輸出型別不能被改變\\\"\",\n    \"1:6\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"但輸出型別不能被改變\\\"\"\n  }), \"let addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\naddition = function (num1: string, num2: string) {\\n  return num1 + num2;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6 title=\\\"函式型別 Function Types\\\" subtitle=\\\"定義的函式不回傳值的話 不管有沒有註記 型別推論都會被認定為 void\\\"\",\n    \"1:6\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"定義的函式不回傳值的話\",\n    \"不管有沒有註記\": true,\n    \"型別推論都會被認定為\": true,\n    \"void\\\"\": true\n  }), \"let addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\naddition = function (num1: number, num2: number) {\\n  num1 + num2;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"函式型別 Function Types\\\" subtitle=\\\"輸入多餘或少於定義的參數 都會報錯\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"輸入多餘或少於定義的參數\",\n    \"都會報錯\\\"\": true\n  }), \"const addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\nconst shouldBeString: string = addition(123, 456, 789);\\n// \\u5831\\u932F\\uFF1A\\u61C9\\u6709 2 \\u500B\\u5F15\\u6578\\uFF0C\\u4F46\\u5F97\\u5230 3 \\u500B\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"函式型別 Function Types\\\" subtitle=\\\"輸入多餘或少於定義的參數 都會報錯\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"輸入多餘或少於定義的參數\",\n    \"都會報錯\\\"\": true\n  }), \"const addition = function (num1: number, num2: number) {\\n  return num1 + num2;\\n};\\nconst shouldBeString: string = addition(123);\\n// \\u5831\\u932F\\uFF1A\\u61C9\\u6709 2 \\u500B\\u5F15\\u6578\\uFF0C\\u4F46\\u5F97\\u5230 1 \\u500B\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\" subtitle=\\\"定義可選參數\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"定義可選參數\\\"\"\n  }), \"function buildName(firstName: string, lastName?: string) {\\n  if (lastName) {\\n      return firstName + ' ' + lastName;\\n  } else {\\n      return firstName;\\n  }\\n}\\nconst tomcat = buildName('Tom', 'Cat');\\nconst tom = buildName('Tom');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:10 title=\\\"函式型別 Function Types\\\" subtitle=\\\"可選參數後面不能再接必要參數\\\"\",\n    \"1:10\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"可選參數後面不能再接必要參數\\\"\"\n  }), \"function buildName(firstName?: string, lastName: string) {\\n  if (firstName) {\\n      return firstName + ' ' + lastName;\\n  } else {\\n      return lastName;\\n  }\\n}\\nconst tomcat = buildName('Tom', 'Cat');\\nconst tom = buildName(undefined, 'Tom');\\n// \\u5831\\u932F\\uFF1A\\u5FC5\\u8981\\u53C3\\u6578\\u4E0D\\u5F97\\u63A5\\u5728\\u9078\\u64C7\\u6027\\u53C3\\u6578\\u4E4B\\u5F8C\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"函式型別 Function Types\\\" subtitle=\\\"設定參數的預設值\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"設定參數的預設值\\\"\"\n  }), \"function buildName(firstName: string, lastName: string = 'Cat') {\\n    return firstName + ' ' + lastName;\\n}\\nlet tomcat = buildName('Tom', 'Cat');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"函式型別 Function Types\\\" subtitle=\\\"TypeScript 會將設定了預設值的參數識別為可選參數\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"TypeScript\",\n    \"會將設定了預設值的參數識別為可選參數\\\"\": true\n  }), \"function buildName(firstName: string, lastName: string = 'Cat') {\\n    return firstName + ' ' + lastName;\\n}\\nlet tom = buildName('Tom');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"函式型別 Function Types\\\" subtitle=\\\"此時就不受「可選參數必須接在必需參數後面」的限制\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"此時就不受「可選參數必須接在必需參數後面」的限制\\\"\"\n  }), \"function buildName(firstName: string, lastName: string = 'Cat') {\\n    return firstName + ' ' + lastName;\\n}\\nlet cat = buildName(undefined, 'Cat');\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\" subtitle=\\\"用 ES6 解構的方式定義剩餘的參數\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"用\",\n    \"ES6\": true,\n    \"解構的方式定義剩餘的參數\\\"\": true\n  }), \"function push(array, ...items) {\\n    items.forEach(function(item) {\\n        array.push(item);\\n    });\\n}\\n// rest \\u5F15\\u6578\\u53EA\\u80FD\\u662F\\u6700\\u5F8C\\u4E00\\u500B\\u5F15\\u6578 \\u5176\\u4ED6\\u7528\\u6CD5\\u8A73\\u898BES6\\n\\nlet a = [];\\npush(a, 1, 2, 3);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:8 title=\\\"函式型別 Function Types\\\" subtitle=\\\"items 是一個 array 可以用陣列的型別來定義它\\\"\",\n    \"1:8\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"items\",\n    \"是一個\": true,\n    \"array\": true,\n    \"可以用陣列的型別來定義它\\\"\": true\n  }), \"function push(array: any[], ...items: any[]) {\\n    items.forEach(function(item) {\\n        array.push(item);\\n    });\\n}\\n\\nlet a = [];\\npush(a, 1, 2, 3);\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"函式型別 Function Types\\\" subtitle=\\\"使用 Union 的方式註記函式型別\\\"\",\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"使用\",\n    \"Union\": true,\n    \"的方式註記函式型別\\\"\": true\n  }), \"function reverse(x: number | string): number | string {\\n  if (typeof x === 'number') {\\n    return Number(x.toString().split('').reverse().join(''));\\n  } else if (typeof x === 'string') {\\n    return x.split('').reverse().join('');\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:10 title=\\\"函式型別 Function Types\\\" subtitle=\\\"可以用更精確的方式註記\\\"\",\n    \"1:10\": true,\n    \"title\": \"\\\"函式型別\",\n    \"Function\": true,\n    \"Types\\\"\": true,\n    \"subtitle\": \"\\\"可以用更精確的方式註記\\\"\"\n  }), \"function reverse(x: number): number;\\nfunction reverse(x: string): string;\\nfunction reverse(x: number | string): number | string {\\n  if (typeof x === 'number') {\\n    return Number(x.toString().split('').reverse().join(''));\\n  } else if (typeof x === 'string') {\\n    return x.split('').reverse().join('');\\n  }\\n}\\n// \\u8D8A\\u7CBE\\u78BA\\u7684\\u5B9A\\u7FA9\\u8981\\u5BEB\\u5728\\u8D8A\\u524D\\u9762\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"型別斷言（Type Assertion）\\\"\",\n    \"title\": \"\\\"型別斷言（Type\",\n    \"Assertion）\\\"\": true\n  }), \"\\u3000\\u3000\\u3000 \\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000<\\u578B\\u5225>\\u503C\\n\\u3000\\u3000\\u3000  \\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u503C as \\u578B\\u5225\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:4 title=\\\"型別斷言（Type Assertion）\\\" subtitle=\\\"當使用 Union 聯合型別時\\\"\",\n    \"1:4\": true,\n    \"title\": \"\\\"型別斷言（Type\",\n    \"Assertion）\\\"\": true,\n    \"subtitle\": \"\\\"當使用\",\n    \"Union\": true,\n    \"聯合型別時\\\"\": true\n  }), \"function getLength(something: string | number): number {\\n  return something.length;\\n}\\n// \\u5831\\u932F\\uFF1A\\u985E\\u578B 'number' \\u6C92\\u6709\\u5C6C\\u6027 'length'\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:8 title=\\\"型別斷言（Type Assertion）\\\" subtitle=\\\"在還不確定型別的時候 就使用其中一個型別的屬性或方法\\\"\",\n    \"1:8\": true,\n    \"title\": \"\\\"型別斷言（Type\",\n    \"Assertion）\\\"\": true,\n    \"subtitle\": \"\\\"在還不確定型別的時候\",\n    \"就使用其中一個型別的屬性或方法\\\"\": true\n  }), \"function getLength(something: string | number): number {\\n  if (something.length) {\\n    return something.length;\\n  } else {\\n    return something.toString().length;\\n  }\\n}\\n// \\u5831\\u932F\\uFF1A\\u985E\\u578B 'number' \\u6C92\\u6709\\u5C6C\\u6027 'length'\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"型別斷言（Type Assertion）\\\" subtitle=\\\"此時可以使用型別斷言 將 something 斷言成 string\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"型別斷言（Type\",\n    \"Assertion）\\\"\": true,\n    \"subtitle\": \"\\\"此時可以使用型別斷言\",\n    \"將\": true,\n    \"something\": true,\n    \"斷言成\": true,\n    \"string\\\"\": true\n  }), \"function getLength(something: string | number): number {\\n  if ((<string>something).length) {\\n    return (<string>something).length;\\n  } else {\\n    return something.toString().length;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"型別斷言（Type Assertion）\\\" subtitle=\\\"此時可以使用型別斷言 將 something 斷言成 string\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"型別斷言（Type\",\n    \"Assertion）\\\"\": true,\n    \"subtitle\": \"\\\"此時可以使用型別斷言\",\n    \"將\": true,\n    \"something\": true,\n    \"斷言成\": true,\n    \"string\\\"\": true\n  }), \"function getLength(something: string | number): number {\\n  if ((something as string).length) {\\n    return (something as string).length;\\n  } else {\\n    return something.toString().length;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:8 title=\\\"型別斷言（Type Assertion）\\\" subtitle=\\\"型別斷言不是型別轉換 不能定義成一個連合型別中不存在的型別\\\"\",\n    \"1:8\": true,\n    \"title\": \"\\\"型別斷言（Type\",\n    \"Assertion）\\\"\": true,\n    \"subtitle\": \"\\\"型別斷言不是型別轉換\",\n    \"不能定義成一個連合型別中不存在的型別\\\"\": true\n  }), \"function getLength(something: string | number): number {\\n  if ((<boolean>something).length) {\\n    return (<boolean>something).length;\\n  } else {\\n    return something.toString().length;\\n  }\\n}\\n// \\u5831\\u932F\\uFF1A\\u5C07\\u985E\\u578B 'string | number' \\u8F49\\u63DB\\u70BA\\u985E\\u578B 'boolean' \\u53EF\\u80FD\\u6703\\u767C\\u751F\\u932F\\u8AA4\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"\\u5176\\u4ED6\\u5167\\u5EFA\\u7269\\u4EF6\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"JavaScript 的內建物件\\\"\",\n    \"title\": \"\\\"JavaScript\",\n    \"的內建物件\\\"\": true\n  }), \"let b: Boolean = new Boolean(1);\\nlet e: Error = new Error('Error occurred');\\nlet d: Date = new Date();\\nlet r: RegExp = /[a-z]/;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"DOM 和 BOM 的內建物件\\\"\",\n    \"title\": \"\\\"DOM\",\n    \"和\": true,\n    \"BOM\": true,\n    \"的內建物件\\\"\": true\n  }), \"let body: HTMLElement = document.body;\\nlet allDiv: NodeList = document.querySelectorAll('div');\\ndocument.addEventListener('click', function(e: MouseEvent) {\\n  // Do something\\n});\\n\"))), mdx(\"hr\", null), mdx(\"p\", {\n    style: {\n      \"color\": \"#ffffff\",\n      \"fontSize\": \"35px\",\n      \"marginBottom\": \"30px\",\n      \"display\": \"block\"\n    }\n  }, \"\\u5176\\u4ED6\\u9084\\u6709\\u5F88\\u591A\\u5167\\u5EFA\\u578B\\u5225 \\u53EF\\u4EE5\\u53C3\\u8003\\uFF1A\"), mdx(\"a\", {\n    style: {\n      \"color\": \"#ffffff\",\n      \"fontSize\": \"30px\",\n      \"marginBottom\": \"30px\",\n      \"display\": \"block\"\n    },\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\",\n    target: \"_blank\"\n  }, \"MDN \\u7684\\u6587\\u4EF6\"), mdx(\"a\", {\n    style: {\n      \"color\": \"#ffffff\",\n      \"fontSize\": \"30px\",\n      \"marginBottom\": \"30px\",\n      \"display\": \"block\"\n    },\n    href: \"https://github.com/Microsoft/TypeScript/tree/master/src/lib\",\n    target: \"_blank\"\n  }, \"TypeScript \\u6838\\u5FC3\\u51FD\\u5F0F\\u5EAB\\u7684\\u5B9A\\u7FA9\\u6A94\\u6848\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"TypeScript \\u4E5F\\u9084\\u6709\\u5176\\u4ED6\\u5F88\\u591A\\u5F88\\u591A\\u5F88\\u591A\\u65B9\\u6CD5\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:6\",\n    \"1:6\": true\n  }), \"TypeScript \\u4E5F\\u9084\\u6709\\u5176\\u4ED6\\u5F88\\u591A\\u5F88\\u591A\\u5F88\\u591A\\u65B9\\u6CD5\\n* \\u5143\\u7D44\\uFF08Tuple\\uFF09\\n* \\u5217\\u8209\\uFF08Enum\\uFF09\\n* \\u985E\\u5225\\uFF08Class\\uFF09\\n* \\u4ECB\\u9762\\uFF08Interfaces\\uFF09\\u8207\\u5BE6\\u73FE\\uFF08Implements\\uFF09\\n* \\u6CDB\\u578B\\uFF08Generics\\uFF09\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u4E4B\\u5F8C\\u518D\\u8AAA\\u310C\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\n\\n\\n\\n\\n\\n\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000\\u3000>> to be continued...\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"7e496b9e-ec75-5daf-acc9-09cb6907c39f","slug":"/presentations/public","title":"TypeScript"}}}