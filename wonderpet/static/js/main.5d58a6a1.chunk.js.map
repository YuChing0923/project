{"version":3,"sources":["components/Elements/Elements.js","components/Start/Start.js","components/Bingo/Bingo.js","components/AddNumber/AddNumber.js","components/Modal/Modal.js","components/App/App.js","serviceWorker.js","index.js"],"names":["className","onClick","text","type","min","max","resultNum","handleInputChange","value","onChange","index","results","num","includes","Start","btnOnClick","btnText","Elements","Bingo","dimension","numbers","style","width","height","map","key","AddNumber","start","addResults","display","length","color","Modal","win","gameStart","id","winLines","lineArr","dimensionArr","Array","fill","i","row","element","col","push","slash1","slash2","lines","App","useState","setResultNum","setStart","setWin","setNumbers","setResults","generateNums","numsArr","ranIndex","Math","floor","random","x","resultArr","useEffect","resultsIndex","result","indexOf","checkLines","winLine","filter","line","ranNums","handleRandom","e","Number","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d58a6a1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({ className, onClick, text }) => (\r\n    <button\r\n    className={className}\r\n    onClick={onClick}>\r\n    {text}\r\n    </button>\r\n)\r\n\r\nconst Input = ({type, min, max, resultNum, handleInputChange}) => (\r\n    <input\r\n    type={type}\r\n    className=\"form_control\"\r\n    min={min}\r\n    max={max}\r\n    value={resultNum}\r\n    onChange={handleInputChange} />\r\n)\r\n\r\nconst BingoDiv = ({ index, results, num }) => (\r\n    <div\r\n    className={`bingo_div ${(results.includes(num)) ? 'result' : ''}`}>\r\n    {num}\r\n    </div>\r\n)\r\n\r\nexport default {\r\n    Button,\r\n    Input,\r\n    BingoDiv\r\n};","import React from 'react';\r\nimport Elements from '../Elements/Elements';\r\n\r\nconst Start = ({ btnOnClick, btnText }) => (\r\n    <div className=\"start_btn\">\r\n        <Elements.Button\r\n        onClick={btnOnClick}\r\n        text={btnText}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default Start;","import React from 'react';\r\nimport Elements from '../Elements/Elements';\r\n\r\nconst Bingo = ({ dimension, numbers, results }) => (\r\n    <div\r\n    className=\"bingo_block\"\r\n    style={{\r\n        width: 56 * dimension,\r\n        height: 56 * dimension\r\n    }}>\r\n        {numbers.map( (num, index) => (\r\n            <Elements.BingoDiv\r\n            num={num}\r\n            index={index}\r\n            results={results}\r\n            key={index + 1}\r\n            />\r\n        ))}\r\n    </div>\r\n)\r\n\r\nexport default Bingo;","import React from 'react';\r\nimport Elements from '../Elements/Elements';\r\n\r\nconst AddNumber = ({ start, dimension, resultNum, handleInputChange, addResults, results, btnOnClick, btnText }) => (\r\n    <div\r\n    className=\"add_number\"\r\n    style={{\r\n        display: (start) ? 'block' : 'none'\r\n    }}>\r\n        <Elements.Input\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max={dimension*dimension}\r\n        resultNum={resultNum}\r\n        handleInputChange={handleInputChange}\r\n        />\r\n        <Elements.Button\r\n        onClick={btnOnClick}\r\n        text={btnText}\r\n        />\r\n        <p\r\n        style={{\r\n          display: ((results.length > 0) && ((resultNum <= 0) || (resultNum > (dimension * dimension)))) ? 'block' : 'none',\r\n          color: 'red'\r\n        }}>\r\n        {`請輸入介於1~${(dimension * dimension)}的數字`}\r\n        </p>\r\n    </div>\r\n)\r\n\r\nexport default AddNumber;","import React from 'react';\r\nimport Elements from '../Elements/Elements';\r\n\r\nconst Modal = ({ win, gameStart }) => (\r\n    <div id=\"modal\"\r\n    style={{\r\n      display: (win >= 4) ? 'block' : 'none'\r\n    }}>\r\n        <p className=\"over\">遊戲結束</p>\r\n        <Elements.Button\r\n        onClick={gameStart}\r\n        text=\"restart\"\r\n        className=\"control_button\"\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default Modal;","import React, { useState, useEffect } from 'react';\n// import Elements from '../Elements/Elements';\nimport Start from '../Start/Start';\nimport Bingo from '../Bingo/Bingo';\nimport AddNumber from '../AddNumber/AddNumber';\nimport Modal from '../Modal/Modal';\n\nimport '../../assets/main.scss';\n\nconst dimension = 4;\n\n//所有可連線類型\nconst lines = () => {\n    const lineArr = [],\n        dimensionArr = new Array(dimension).fill('');\n    for (let i = 0; i < dimension; i++) {\n        //橫線\n        const row = dimensionArr.map((element, index) => (\n                index + dimension * i\n            )),\n            //直線\n            col = dimensionArr.map((element, index) => (\n                index * dimension + i\n            ));\n        lineArr.push(row);\n        lineArr.push(col);\n    }\n    //斜線\n    const slash1 = dimensionArr.map((element, index) => (\n            index + dimension * index\n        )),\n        slash2 = dimensionArr.map((element, index) => (\n            (dimension - 1) * (index + 1)\n        ));\n    lineArr.push(slash1);\n    lineArr.push(slash2);\n    return lineArr\n}\n\nconst winLines = lines();\n\nconst App = () => {\n    const [resultNum, setResultNum] = useState(''),\n        [start, setStart] = useState(false),\n        [win, setWin] = useState(0),\n        [numbers, setNumbers] = useState(new Array(dimension * dimension).fill('')),\n        [results, setResults] = useState([]);\n\n    //隨機產生亂數\n    const handleRandom = () => {\n        const ranNums = generateNums(dimension * dimension);\n        return setNumbers(ranNums);\n    }\n\n    const generateNums = (max) => {\n        const numsArr = numbers.map((element, index) => (\n            index + 1\n        ));\n        for (let i = numsArr.length - 1; i > 0; i--) {\n            //陣列亂數則一\n            const ranIndex = Math.floor(Math.random() * (i + 1)),\n                x = numsArr[i];\n            numsArr[i] = numsArr[ranIndex];\n            //最後一張跟陣列亂數 位子對調\n            numsArr[ranIndex] = x;\n        }\n        return numsArr;\n    }\n\n    const handleInputChange = (e) => setResultNum(Number(e.target.value));\n\n    //將已選數字加入 result array\n    const addResults = () => {\n        if (resultNum > 0 && resultNum <= (dimension * dimension) && !results.includes(resultNum)) {\n            const resultArr = [...results, resultNum];\n            return (\n                setResults(resultArr)\n            );\n        }\n    }\n\n    //檢查是否連線\n    useEffect(() => {\n        const resultsIndex = results.map((result) => (\n            numbers.indexOf(result)\n        ))\n        const checkLines = winLines.map((winLine) => (\n            !winLine.map((lines) => (\n                resultsIndex.includes(lines)\n            )).includes(false)\n        )).filter(line => (line === true)).length;\n        return setWin(checkLines);\n    }, [results])\n\n    //重新開始 state 重設\n    const gameStart = () => {\n        handleRandom();\n        setStart(true);\n        setResults([]);\n        setResultNum('');\n        setWin(0);\n    }\n\n    return (\n        <div>\n          <Modal\n          win={win}\n          gameStart={gameStart}\n          />\n          <div className=\"container\">\n              <Start\n              btnText={ start ? \"restart\" : \"start\" }\n              btnOnClick={gameStart}\n              />\n              <Bingo\n              dimension={dimension}\n              numbers={numbers} \n              results={results}\n              />\n              <AddNumber\n              start={start}\n              dimension={dimension}\n              resultNum={resultNum}\n              handleInputChange={handleInputChange}\n              addResults={addResults}\n              results={results}\n              btnOnClick={addResults}\n              btnText=\"add number\"\n              />\n          </div>\n        </div>\n    )\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}